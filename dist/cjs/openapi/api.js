"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Cosmos SDK - Legacy REST and gRPC Gateway docs
 * A REST interface for state queries, legacy transactions
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryApiFp = exports.QueryApiAxiosParamCreator = exports.MintApi = exports.MintApiFactory = exports.MintApiFp = exports.MintApiAxiosParamCreator = exports.GovernanceApi = exports.GovernanceApiFactory = exports.GovernanceApiFp = exports.GovernanceApiAxiosParamCreator = exports.GaiaRESTApi = exports.GaiaRESTApiFactory = exports.GaiaRESTApiFp = exports.GaiaRESTApiAxiosParamCreator = exports.DistributionApi = exports.DistributionApiFactory = exports.DistributionApiFp = exports.DistributionApiAxiosParamCreator = exports.BankApi = exports.BankApiFactory = exports.BankApiFp = exports.BankApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.TendermintTypesVoteTypeEnum = exports.TendermintTypesSignedMsgType = exports.TendermintTypesCommitSigBlockIdFlagEnum = exports.TendermintTypesBlockIDFlag = exports.SingleRepresentsASingleSignerModeEnum = exports.InlineResponse20066ValidatorsStatusEnum = exports.InlineResponse20057VotesOptionEnum = exports.InlineResponse20057OptionsOptionEnum = exports.InlineResponse20052ProposalsStatusEnum = exports.InlineResponse20035BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum = exports.InlineResponse20035BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum = exports.InlineObject16ModeEnum = exports.CosmosTxV1beta1OrderBy = exports.CosmosTxV1beta1ModeInfoSingleModeEnum = exports.CosmosTxV1beta1BroadcastTxRequestModeEnum = exports.CosmosTxV1beta1BroadcastMode = exports.CosmosTxSigningV1beta1SignMode = exports.CosmosStakingV1beta1ValidatorStatusEnum = exports.CosmosStakingV1beta1BondStatus = exports.CosmosGovV1beta1WeightedVoteOptionOptionEnum = exports.CosmosGovV1beta1VoteOption = exports.CosmosGovV1beta1VoteOptionEnum = exports.CosmosGovV1beta1ProposalStatus = exports.CosmosGovV1beta1ProposalStatusEnum = void 0;
exports.TransactionsApi = exports.TransactionsApiFactory = exports.TransactionsApiFp = exports.TransactionsApiAxiosParamCreator = exports.TendermintRPCApi = exports.TendermintRPCApiFactory = exports.TendermintRPCApiFp = exports.TendermintRPCApiAxiosParamCreator = exports.StakingApi = exports.StakingApiFactory = exports.StakingApiFp = exports.StakingApiAxiosParamCreator = exports.SlashingApi = exports.SlashingApiFactory = exports.SlashingApiFp = exports.SlashingApiAxiosParamCreator = exports.ServiceApi = exports.ServiceApiFactory = exports.ServiceApiFp = exports.ServiceApiAxiosParamCreator = exports.QueryApi = exports.QueryApiFactory = void 0;
var axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.CosmosGovV1beta1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
/**
 * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
 * @export
 * @enum {string}
 */
exports.CosmosGovV1beta1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
exports.CosmosGovV1beta1VoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */
exports.CosmosGovV1beta1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.CosmosGovV1beta1WeightedVoteOptionOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
/**
 * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
 * @export
 * @enum {string}
 */
exports.CosmosStakingV1beta1BondStatus = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
exports.CosmosStakingV1beta1ValidatorStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
/**
 * SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future
 * @export
 * @enum {string}
 */
exports.CosmosTxSigningV1beta1SignMode = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON'
};
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for the tx to be committed in a block.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
 * @export
 * @enum {string}
 */
exports.CosmosTxV1beta1BroadcastMode = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
exports.CosmosTxV1beta1BroadcastTxRequestModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
exports.CosmosTxV1beta1ModeInfoSingleModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON'
};
/**
 * - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
 * @export
 * @enum {string}
 */
exports.CosmosTxV1beta1OrderBy = {
    Unspecified: 'ORDER_BY_UNSPECIFIED',
    Asc: 'ORDER_BY_ASC',
    Desc: 'ORDER_BY_DESC'
};
exports.InlineObject16ModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
};
exports.InlineResponse20035BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
exports.InlineResponse20035BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
exports.InlineResponse20052ProposalsStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
};
exports.InlineResponse20057OptionsOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.InlineResponse20057VotesOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
};
exports.InlineResponse20066ValidatorsStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
};
exports.SingleRepresentsASingleSignerModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON'
};
/**
 *
 * @export
 * @enum {string}
 */
exports.TendermintTypesBlockIDFlag = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
exports.TendermintTypesCommitSigBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
};
/**
 * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
 * @export
 * @enum {string}
 */
exports.TendermintTypesSignedMsgType = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
exports.TendermintTypesVoteTypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
var AuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        authAccountsAddressGet: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('authAccountsAddressGet', 'address', address);
                    localVarPath = "/auth/accounts/{address}"
                        .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
var AuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        authAccountsAddressGet: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authAccountsAddressGet(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
var AuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         *
         * @summary Get the account information on blockchain
         * @param {string} address Account address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        authAccountsAddressGet: function (address, options) {
            return localVarFp.authAccountsAddressGet(address, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get the account information on blockchain
     * @param {string} address Account address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authAccountsAddressGet = function (address, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authAccountsAddressGet(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
/**
 * BankApi - axios parameter creator
 * @export
 */
var BankApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {InlineObject3} account
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost: function (address, account, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsAddressTransfersPost', 'address', address);
                    // verify required parameter 'account' is not null or undefined
                    (0, common_1.assertParamExists)('bankAccountsAddressTransfersPost', 'account', account);
                    localVarPath = "/bank/accounts/{address}/transfers"
                        .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(account, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankBalancesAddressGet: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('bankBalancesAddressGet', 'address', address);
                    localVarPath = "/bank/balances/{address}"
                        .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankTotalDenominationGet: function (denomination, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'denomination' is not null or undefined
                    (0, common_1.assertParamExists)('bankTotalDenominationGet', 'denomination', denomination);
                    localVarPath = "/bank/total/{denomination}"
                        .replace("{".concat("denomination", "}"), encodeURIComponent(String(denomination)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankTotalGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/bank/total";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.BankApiAxiosParamCreator = BankApiAxiosParamCreator;
/**
 * BankApi - functional programming interface
 * @export
 */
var BankApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.BankApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {InlineObject3} account
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost: function (address, account, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankAccountsAddressTransfersPost(address, account, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankBalancesAddressGet: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankBalancesAddressGet(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankTotalDenominationGet: function (denomination, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTotalDenominationGet(denomination, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankTotalGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankTotalGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.BankApiFp = BankApiFp;
/**
 * BankApi - factory interface
 * @export
 */
var BankApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.BankApiFp)(configuration);
    return {
        /**
         *
         * @summary Send coins from one account to another
         * @param {string} address Account address in bech32 format
         * @param {InlineObject3} account
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankAccountsAddressTransfersPost: function (address, account, options) {
            return localVarFp.bankAccountsAddressTransfersPost(address, account, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get the account balances
         * @param {string} address Account address in bech32 format
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankBalancesAddressGet: function (address, options) {
            return localVarFp.bankBalancesAddressGet(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Total supply of a single coin denomination
         * @param {string} denomination Coin denomination
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankTotalDenominationGet: function (denomination, options) {
            return localVarFp.bankTotalDenominationGet(denomination, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Total supply of coins in the chain
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        bankTotalGet: function (options) {
            return localVarFp.bankTotalGet(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.BankApiFactory = BankApiFactory;
/**
 * BankApi - object-oriented interface
 * @export
 * @class BankApi
 * @extends {BaseAPI}
 */
var BankApi = /** @class */ (function (_super) {
    __extends(BankApi, _super);
    function BankApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Send coins from one account to another
     * @param {string} address Account address in bech32 format
     * @param {InlineObject3} account
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BankApi
     */
    BankApi.prototype.bankAccountsAddressTransfersPost = function (address, account, options) {
        var _this = this;
        return (0, exports.BankApiFp)(this.configuration).bankAccountsAddressTransfersPost(address, account, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get the account balances
     * @param {string} address Account address in bech32 format
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BankApi
     */
    BankApi.prototype.bankBalancesAddressGet = function (address, options) {
        var _this = this;
        return (0, exports.BankApiFp)(this.configuration).bankBalancesAddressGet(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Total supply of a single coin denomination
     * @param {string} denomination Coin denomination
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BankApi
     */
    BankApi.prototype.bankTotalDenominationGet = function (denomination, options) {
        var _this = this;
        return (0, exports.BankApiFp)(this.configuration).bankTotalDenominationGet(denomination, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Total supply of coins in the chain
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof BankApi
     */
    BankApi.prototype.bankTotalGet = function (options) {
        var _this = this;
        return (0, exports.BankApiFp)(this.configuration).bankTotalGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return BankApi;
}(base_1.BaseAPI));
exports.BankApi = BankApi;
/**
 * DistributionApi - axios parameter creator
 * @export
 */
var DistributionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/distribution/community_pool";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrRewardsGet', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/distribution/delegators/{delegatorAddr}/rewards"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject12} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrRewardsPost', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/distribution/delegators/{delegatorAddr}/rewards"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(withdrawRequestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet', 'delegatorAddr', delegatorAddr);
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)))
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {InlineObject13} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost', 'delegatorAddr', delegatorAddr);
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost', 'validatorAddr', validatorAddr);
                    localVarPath = "/distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)))
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(withdrawRequestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrWithdrawAddressGet', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/distribution/delegators/{delegatorAddr}/withdraw_address"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject14} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionDelegatorsDelegatorAddrWithdrawAddressPost', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/distribution/delegators/{delegatorAddr}/withdraw_address"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(withdrawRequestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/distribution/parameters";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionValidatorsValidatorAddrGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/distribution/validators/{validatorAddr}"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionValidatorsValidatorAddrOutstandingRewardsGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/distribution/validators/{validatorAddr}/outstanding_rewards"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionValidatorsValidatorAddrRewardsGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/distribution/validators/{validatorAddr}/rewards"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {InlineObject15} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('distributionValidatorsValidatorAddrRewardsPost', 'validatorAddr', validatorAddr);
                    localVarPath = "/distribution/validators/{validatorAddr}/rewards"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(withdrawRequestBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.DistributionApiAxiosParamCreator = DistributionApiAxiosParamCreator;
/**
 * DistributionApi - functional programming interface
 * @export
 */
var DistributionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DistributionApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionCommunityPoolGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject12} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {InlineObject13} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject14} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionParametersGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionParametersGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionValidatorsValidatorAddrGet(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {InlineObject15} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.DistributionApiFp = DistributionApiFp;
/**
 * DistributionApi - factory interface
 * @export
 */
var DistributionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DistributionApiFp)(configuration);
    return {
        /**
         *
         * @summary Community pool parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionCommunityPoolGet: function (options) {
            return localVarFp.distributionCommunityPoolGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the sum of all the rewards earned by delegations by a single delegator
         * @summary Get the total rewards balance from all delegations
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsGet: function (delegatorAddr, options) {
            return localVarFp.distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Withdraw all the delegator\'s delegation rewards
         * @summary Withdraw all the delegator\'s delegation rewards
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject12} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsPost: function (delegatorAddr, withdrawRequestBody, options) {
            return localVarFp.distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query a single delegation reward by a delegator
         * @summary Query a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return localVarFp.distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Withdraw a delegator\'s delegation reward from a single validator
         * @summary Withdraw a delegation reward
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {InlineObject13} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost: function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
            return localVarFp.distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
         * @summary Get the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressGet: function (delegatorAddr, options) {
            return localVarFp.distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Replace the delegations\' rewards withdrawal address for a new one.
         * @summary Replace the rewards withdrawal address
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject14} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionDelegatorsDelegatorAddrWithdrawAddressPost: function (delegatorAddr, withdrawRequestBody, options) {
            return localVarFp.distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Fee distribution parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionParametersGet: function (options) {
            return localVarFp.distributionParametersGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query the distribution information of a single validator
         * @summary Validator distribution information
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrGet: function (validatorAddr, options) {
            return localVarFp.distributionValidatorsValidatorAddrGet(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Fee distribution outstanding rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrOutstandingRewardsGet: function (validatorAddr, options) {
            return localVarFp.distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query the commission and self-delegation rewards of validator.
         * @summary Commission and self-delegation rewards of a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsGet: function (validatorAddr, options) {
            return localVarFp.distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Withdraw the validator\'s self-delegation and commissions rewards
         * @summary Withdraw the validator\'s rewards
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {InlineObject15} [withdrawRequestBody]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        distributionValidatorsValidatorAddrRewardsPost: function (validatorAddr, withdrawRequestBody, options) {
            return localVarFp.distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DistributionApiFactory = DistributionApiFactory;
/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
var DistributionApi = /** @class */ (function (_super) {
    __extends(DistributionApi, _super);
    function DistributionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Community pool parameters
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionCommunityPoolGet = function (options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionCommunityPoolGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the sum of all the rewards earned by delegations by a single delegator
     * @summary Get the total rewards balance from all delegations
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsGet = function (delegatorAddr, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionDelegatorsDelegatorAddrRewardsGet(delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Withdraw all the delegator\'s delegation rewards
     * @summary Withdraw all the delegator\'s delegation rewards
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {InlineObject12} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsPost = function (delegatorAddr, withdrawRequestBody, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionDelegatorsDelegatorAddrRewardsPost(delegatorAddr, withdrawRequestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query a single delegation reward by a delegator
     * @summary Query a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Withdraw a delegator\'s delegation reward from a single validator
     * @summary Withdraw a delegation reward
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {InlineObject13} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost = function (delegatorAddr, validatorAddr, withdrawRequestBody, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionDelegatorsDelegatorAddrRewardsValidatorAddrPost(delegatorAddr, validatorAddr, withdrawRequestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get the delegations\' rewards withdrawal address. This is the address in which the user will receive the reward funds
     * @summary Get the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressGet = function (delegatorAddr, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressGet(delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Replace the delegations\' rewards withdrawal address for a new one.
     * @summary Replace the rewards withdrawal address
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {InlineObject14} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionDelegatorsDelegatorAddrWithdrawAddressPost = function (delegatorAddr, withdrawRequestBody, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionDelegatorsDelegatorAddrWithdrawAddressPost(delegatorAddr, withdrawRequestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Fee distribution parameters
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionParametersGet = function (options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionParametersGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query the distribution information of a single validator
     * @summary Validator distribution information
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrGet = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionValidatorsValidatorAddrGet(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Fee distribution outstanding rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrOutstandingRewardsGet = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionValidatorsValidatorAddrOutstandingRewardsGet(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query the commission and self-delegation rewards of validator.
     * @summary Commission and self-delegation rewards of a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsGet = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionValidatorsValidatorAddrRewardsGet(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Withdraw the validator\'s self-delegation and commissions rewards
     * @summary Withdraw the validator\'s rewards
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {InlineObject15} [withdrawRequestBody]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    DistributionApi.prototype.distributionValidatorsValidatorAddrRewardsPost = function (validatorAddr, withdrawRequestBody, options) {
        var _this = this;
        return (0, exports.DistributionApiFp)(this.configuration).distributionValidatorsValidatorAddrRewardsPost(validatorAddr, withdrawRequestBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DistributionApi;
}(base_1.BaseAPI));
exports.DistributionApi = DistributionApi;
/**
 * GaiaRESTApi - axios parameter creator
 * @export
 */
var GaiaRESTApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/node_info";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.GaiaRESTApiAxiosParamCreator = GaiaRESTApiAxiosParamCreator;
/**
 * GaiaRESTApi - functional programming interface
 * @export
 */
var GaiaRESTApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.GaiaRESTApiAxiosParamCreator)(configuration);
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.nodeInfoGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.GaiaRESTApiFp = GaiaRESTApiFp;
/**
 * GaiaRESTApi - factory interface
 * @export
 */
var GaiaRESTApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.GaiaRESTApiFp)(configuration);
    return {
        /**
         * Information about the connected node
         * @summary The properties of the connected node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInfoGet: function (options) {
            return localVarFp.nodeInfoGet(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GaiaRESTApiFactory = GaiaRESTApiFactory;
/**
 * GaiaRESTApi - object-oriented interface
 * @export
 * @class GaiaRESTApi
 * @extends {BaseAPI}
 */
var GaiaRESTApi = /** @class */ (function (_super) {
    __extends(GaiaRESTApi, _super);
    function GaiaRESTApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Information about the connected node
     * @summary The properties of the connected node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GaiaRESTApi
     */
    GaiaRESTApi.prototype.nodeInfoGet = function (options) {
        var _this = this;
        return (0, exports.GaiaRESTApiFp)(this.configuration).nodeInfoGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GaiaRESTApi;
}(base_1.BaseAPI));
exports.GaiaRESTApi = GaiaRESTApi;
/**
 * GovernanceApi - axios parameter creator
 * @export
 */
var GovernanceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersDepositGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/gov/parameters/deposit";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersTallyingGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/gov/parameters/tallying";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersVotingGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/gov/parameters/voting";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsGet: function (voter, depositor, status, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/gov/proposals";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (voter !== undefined) {
                        localVarQueryParameter['voter'] = voter;
                    }
                    if (depositor !== undefined) {
                        localVarQueryParameter['depositor'] = depositor;
                    }
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {InlineObject9} postProposalBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsParamChangePost: function (postProposalBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'postProposalBody' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsParamChangePost', 'postProposalBody', postProposalBody);
                    localVarPath = "/gov/proposals/param_change";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postProposalBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {InlineObject8} postProposalBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsPost: function (postProposalBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'postProposalBody' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsPost', 'postProposalBody', postProposalBody);
                    localVarPath = "/gov/proposals";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postProposalBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdDepositsDepositorGet', 'proposalId', proposalId);
                    // verify required parameter 'depositor' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdDepositsDepositorGet', 'depositor', depositor);
                    localVarPath = "/gov/proposals/{proposalId}/deposits/{depositor}"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)))
                        .replace("{".concat("depositor", "}"), encodeURIComponent(String(depositor)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdDepositsGet', 'proposalId', proposalId);
                    localVarPath = "/gov/proposals/{proposalId}/deposits"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {InlineObject10} postDepositBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdDepositsPost', 'proposalId', proposalId);
                    // verify required parameter 'postDepositBody' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdDepositsPost', 'postDepositBody', postDepositBody);
                    localVarPath = "/gov/proposals/{proposalId}/deposits"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postDepositBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdGet', 'proposalId', proposalId);
                    localVarPath = "/gov/proposals/{proposalId}"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdProposerGet', 'proposalId', proposalId);
                    localVarPath = "/gov/proposals/{proposalId}/proposer"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdTallyGet', 'proposalId', proposalId);
                    localVarPath = "/gov/proposals/{proposalId}/tally"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdVotesGet', 'proposalId', proposalId);
                    localVarPath = "/gov/proposals/{proposalId}/votes"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {InlineObject11} postVoteBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdVotesPost', 'proposalId', proposalId);
                    // verify required parameter 'postVoteBody' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdVotesPost', 'postVoteBody', postVoteBody);
                    localVarPath = "/gov/proposals/{proposalId}/votes"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(postVoteBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdVotesVoterGet', 'proposalId', proposalId);
                    // verify required parameter 'voter' is not null or undefined
                    (0, common_1.assertParamExists)('govProposalsProposalIdVotesVoterGet', 'voter', voter);
                    localVarPath = "/gov/proposals/{proposalId}/votes/{voter}"
                        .replace("{".concat("proposalId", "}"), encodeURIComponent(String(proposalId)))
                        .replace("{".concat("voter", "}"), encodeURIComponent(String(voter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.GovernanceApiAxiosParamCreator = GovernanceApiAxiosParamCreator;
/**
 * GovernanceApi - functional programming interface
 * @export
 */
var GovernanceApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.GovernanceApiAxiosParamCreator)(configuration);
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersDepositGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govParametersDepositGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersTallyingGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govParametersTallyingGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersVotingGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govParametersVotingGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsGet: function (voter, depositor, status, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsGet(voter, depositor, status, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {InlineObject9} postProposalBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsParamChangePost: function (postProposalBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsParamChangePost(postProposalBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {InlineObject8} postProposalBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsPost: function (postProposalBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsPost(postProposalBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdDepositsGet(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {InlineObject10} postDepositBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdGet(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdProposerGet(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdTallyGet(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdVotesGet(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {InlineObject11} postVoteBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdVotesPost(proposalId, postVoteBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govProposalsProposalIdVotesVoterGet(proposalId, voter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.GovernanceApiFp = GovernanceApiFp;
/**
 * GovernanceApi - factory interface
 * @export
 */
var GovernanceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.GovernanceApiFp)(configuration);
    return {
        /**
         * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
         * @summary Query governance deposit parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersDepositGet: function (options) {
            return localVarFp.govParametersDepositGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query governance tally parameters
         * @summary Query governance tally parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersTallyingGet: function (options) {
            return localVarFp.govParametersTallyingGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query governance voting parameters. The voting_period units are in nanoseconds.
         * @summary Query governance voting parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govParametersVotingGet: function (options) {
            return localVarFp.govParametersVotingGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query proposals information with parameters
         * @summary Query proposals
         * @param {string} [voter] voter address
         * @param {string} [depositor] depositor address
         * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsGet: function (voter, depositor, status, options) {
            return localVarFp.govProposalsGet(voter, depositor, status, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Generate a parameter change proposal transaction
         * @summary Generate a parameter change proposal transaction
         * @param {InlineObject9} postProposalBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsParamChangePost: function (postProposalBody, options) {
            return localVarFp.govProposalsParamChangePost(postProposalBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send transaction to submit a proposal
         * @summary Submit a proposal
         * @param {InlineObject8} postProposalBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsPost: function (postProposalBody, options) {
            return localVarFp.govProposalsPost(postProposalBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query deposit by proposalId and depositor address
         * @summary Query deposit
         * @param {string} proposalId proposal id
         * @param {string} depositor Bech32 depositor address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsDepositorGet: function (proposalId, depositor, options) {
            return localVarFp.govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query deposits by proposalId
         * @summary Query deposits
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsGet: function (proposalId, options) {
            return localVarFp.govProposalsProposalIdDepositsGet(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send transaction to deposit tokens to a proposal
         * @summary Deposit tokens to a proposal
         * @param {string} proposalId proposal id
         * @param {InlineObject10} postDepositBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdDepositsPost: function (proposalId, postDepositBody, options) {
            return localVarFp.govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query a proposal by id
         * @summary Query a proposal
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdGet: function (proposalId, options) {
            return localVarFp.govProposalsProposalIdGet(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query for the proposer for a proposal
         * @summary Query proposer
         * @param {string} proposalId
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdProposerGet: function (proposalId, options) {
            return localVarFp.govProposalsProposalIdProposerGet(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
         * @summary Get a proposal\'s tally result at the current time
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdTallyGet: function (proposalId, options) {
            return localVarFp.govProposalsProposalIdTallyGet(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query voters information by proposalId
         * @summary Query voters
         * @param {string} proposalId proposal id
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesGet: function (proposalId, options) {
            return localVarFp.govProposalsProposalIdVotesGet(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send transaction to vote a proposal
         * @summary Vote a proposal
         * @param {string} proposalId proposal id
         * @param {InlineObject11} postVoteBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesPost: function (proposalId, postVoteBody, options) {
            return localVarFp.govProposalsProposalIdVotesPost(proposalId, postVoteBody, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Query vote information by proposal Id and voter address
         * @summary Query vote
         * @param {string} proposalId proposal id
         * @param {string} voter Bech32 voter address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        govProposalsProposalIdVotesVoterGet: function (proposalId, voter, options) {
            return localVarFp.govProposalsProposalIdVotesVoterGet(proposalId, voter, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GovernanceApiFactory = GovernanceApiFactory;
/**
 * GovernanceApi - object-oriented interface
 * @export
 * @class GovernanceApi
 * @extends {BaseAPI}
 */
var GovernanceApi = /** @class */ (function (_super) {
    __extends(GovernanceApi, _super);
    function GovernanceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
     * @summary Query governance deposit parameters
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govParametersDepositGet = function (options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govParametersDepositGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query governance tally parameters
     * @summary Query governance tally parameters
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govParametersTallyingGet = function (options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govParametersTallyingGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query governance voting parameters. The voting_period units are in nanoseconds.
     * @summary Query governance voting parameters
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govParametersVotingGet = function (options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govParametersVotingGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query proposals information with parameters
     * @summary Query proposals
     * @param {string} [voter] voter address
     * @param {string} [depositor] depositor address
     * @param {string} [status] proposal status, valid values can be &#x60;\&quot;deposit_period\&quot;&#x60;, &#x60;\&quot;voting_period\&quot;&#x60;, &#x60;\&quot;passed\&quot;&#x60;, &#x60;\&quot;rejected\&quot;&#x60;
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsGet = function (voter, depositor, status, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsGet(voter, depositor, status, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Generate a parameter change proposal transaction
     * @summary Generate a parameter change proposal transaction
     * @param {InlineObject9} postProposalBody
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsParamChangePost = function (postProposalBody, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsParamChangePost(postProposalBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send transaction to submit a proposal
     * @summary Submit a proposal
     * @param {InlineObject8} postProposalBody
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsPost = function (postProposalBody, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsPost(postProposalBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query deposit by proposalId and depositor address
     * @summary Query deposit
     * @param {string} proposalId proposal id
     * @param {string} depositor Bech32 depositor address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdDepositsDepositorGet = function (proposalId, depositor, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdDepositsDepositorGet(proposalId, depositor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query deposits by proposalId
     * @summary Query deposits
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdDepositsGet = function (proposalId, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdDepositsGet(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send transaction to deposit tokens to a proposal
     * @summary Deposit tokens to a proposal
     * @param {string} proposalId proposal id
     * @param {InlineObject10} postDepositBody
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdDepositsPost = function (proposalId, postDepositBody, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdDepositsPost(proposalId, postDepositBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query a proposal by id
     * @summary Query a proposal
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdGet = function (proposalId, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdGet(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query for the proposer for a proposal
     * @summary Query proposer
     * @param {string} proposalId
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdProposerGet = function (proposalId, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdProposerGet(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Gets a proposal\'s tally result at the current time. If the proposal is pending deposits (i.e status \'DepositPeriod\') it returns an empty tally result.
     * @summary Get a proposal\'s tally result at the current time
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdTallyGet = function (proposalId, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdTallyGet(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query voters information by proposalId
     * @summary Query voters
     * @param {string} proposalId proposal id
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdVotesGet = function (proposalId, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdVotesGet(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send transaction to vote a proposal
     * @summary Vote a proposal
     * @param {string} proposalId proposal id
     * @param {InlineObject11} postVoteBody
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdVotesPost = function (proposalId, postVoteBody, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdVotesPost(proposalId, postVoteBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Query vote information by proposal Id and voter address
     * @summary Query vote
     * @param {string} proposalId proposal id
     * @param {string} voter Bech32 voter address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof GovernanceApi
     */
    GovernanceApi.prototype.govProposalsProposalIdVotesVoterGet = function (proposalId, voter, options) {
        var _this = this;
        return (0, exports.GovernanceApiFp)(this.configuration).govProposalsProposalIdVotesVoterGet(proposalId, voter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GovernanceApi;
}(base_1.BaseAPI));
exports.GovernanceApi = GovernanceApi;
/**
 * MintApi - axios parameter creator
 * @export
 */
var MintApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/minting/annual-provisions";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingInflationGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/minting/inflation";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/minting/parameters";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.MintApiAxiosParamCreator = MintApiAxiosParamCreator;
/**
 * MintApi - functional programming interface
 * @export
 */
var MintApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MintApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintingAnnualProvisionsGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingInflationGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintingInflationGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingParametersGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintingParametersGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.MintApiFp = MintApiFp;
/**
 * MintApi - factory interface
 * @export
 */
var MintApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MintApiFp)(configuration);
    return {
        /**
         *
         * @summary Current minting annual provisions value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingAnnualProvisionsGet: function (options) {
            return localVarFp.mintingAnnualProvisionsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Current minting inflation value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingInflationGet: function (options) {
            return localVarFp.mintingInflationGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Minting module parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        mintingParametersGet: function (options) {
            return localVarFp.mintingParametersGet(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MintApiFactory = MintApiFactory;
/**
 * MintApi - object-oriented interface
 * @export
 * @class MintApi
 * @extends {BaseAPI}
 */
var MintApi = /** @class */ (function (_super) {
    __extends(MintApi, _super);
    function MintApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Current minting annual provisions value
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof MintApi
     */
    MintApi.prototype.mintingAnnualProvisionsGet = function (options) {
        var _this = this;
        return (0, exports.MintApiFp)(this.configuration).mintingAnnualProvisionsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Current minting inflation value
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof MintApi
     */
    MintApi.prototype.mintingInflationGet = function (options) {
        var _this = this;
        return (0, exports.MintApiFp)(this.configuration).mintingInflationGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Minting module parameters
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof MintApi
     */
    MintApi.prototype.mintingParametersGet = function (options) {
        var _this = this;
        return (0, exports.MintApiFp)(this.configuration).mintingParametersGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MintApi;
}(base_1.BaseAPI));
exports.MintApi = MintApi;
/**
 * QueryApi - axios parameter creator
 * @export
 */
var QueryApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('account', 'address', address);
                    localVarPath = "/cosmos/auth/v1beta1/accounts/{address}"
                        .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Accounts returns all the existing accounts
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/auth/v1beta1/accounts";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('allBalances', 'address', address);
                    localVarPath = "/cosmos/bank/v1beta1/balances/{address}"
                        .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/evidence/v1beta1/evidence";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: function (granter, grantee, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'granter' is not null or undefined
                    (0, common_1.assertParamExists)('allowance', 'granter', granter);
                    // verify required parameter 'grantee' is not null or undefined
                    (0, common_1.assertParamExists)('allowance', 'grantee', grantee);
                    localVarPath = "/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}"
                        .replace("{".concat("granter", "}"), encodeURIComponent(String(granter)))
                        .replace("{".concat("grantee", "}"), encodeURIComponent(String(grantee)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'grantee' is not null or undefined
                    (0, common_1.assertParamExists)('allowances', 'grantee', grantee);
                    localVarPath = "/cosmos/feegrant/v1beta1/allowances/{grantee}"
                        .replace("{".concat("grantee", "}"), encodeURIComponent(String(grantee)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/mint/v1beta1/annual_provisions";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: function (name, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'name' is not null or undefined
                    (0, common_1.assertParamExists)('appliedPlan', 'name', name);
                    localVarPath = "/cosmos/upgrade/v1beta1/applied_plan/{name}"
                        .replace("{".concat("name", "}"), encodeURIComponent(String(name)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/auth/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: function (address, denom, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'address' is not null or undefined
                    (0, common_1.assertParamExists)('balance', 'address', address);
                    // verify required parameter 'denom' is not null or undefined
                    (0, common_1.assertParamExists)('balance', 'denom', denom);
                    localVarPath = "/cosmos/bank/v1beta1/balances/{address}/{denom}"
                        .replace("{".concat("address", "}"), encodeURIComponent(String(address)))
                        .replace("{".concat("denom", "}"), encodeURIComponent(String(denom)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/distribution/v1beta1/community_pool";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/upgrade/v1beta1/current_plan";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: function (validatorAddr, delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegation', 'validatorAddr', validatorAddr);
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegation', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}"
                        .replace("{".concat("validator_addr", "}"), encodeURIComponent(String(validatorAddr)))
                        .replace("{".concat("delegator_addr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: function (delegatorAddress, validatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegationRewards', 'delegatorAddress', delegatorAddress);
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegationRewards', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}"
                        .replace("{".concat("delegator_address", "}"), encodeURIComponent(String(delegatorAddress)))
                        .replace("{".concat("validator_address", "}"), encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: function (delegatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegationTotalRewards', 'delegatorAddress', delegatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards"
                        .replace("{".concat("delegator_address", "}"), encodeURIComponent(String(delegatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorDelegations', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegations/{delegator_addr}"
                        .replace("{".concat("delegator_addr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorUnbondingDelegations', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations"
                        .replace("{".concat("delegator_addr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorValidator', 'delegatorAddr', delegatorAddr);
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorValidator', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}"
                        .replace("{".concat("delegator_addr", "}"), encodeURIComponent(String(delegatorAddr)))
                        .replace("{".concat("validator_addr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: function (delegatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorValidators', 'delegatorAddress', delegatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators"
                        .replace("{".concat("delegator_address", "}"), encodeURIComponent(String(delegatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: function (delegatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('delegatorWithdrawAddress', 'delegatorAddress', delegatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address"
                        .replace("{".concat("delegator_address", "}"), encodeURIComponent(String(delegatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: function (denom, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'denom' is not null or undefined
                    (0, common_1.assertParamExists)('denomMetadata', 'denom', denom);
                    localVarPath = "/cosmos/bank/v1beta1/denoms_metadata/{denom}"
                        .replace("{".concat("denom", "}"), encodeURIComponent(String(denom)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'denom' is not null or undefined
                    (0, common_1.assertParamExists)('denomOwners', 'denom', denom);
                    localVarPath = "/cosmos/bank/v1beta1/denom_owners/{denom}"
                        .replace("{".concat("denom", "}"), encodeURIComponent(String(denom)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/denoms_metadata";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: function (proposalId, depositor, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('deposit', 'proposalId', proposalId);
                    // verify required parameter 'depositor' is not null or undefined
                    (0, common_1.assertParamExists)('deposit', 'depositor', depositor);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}"
                        .replace("{".concat("proposal_id", "}"), encodeURIComponent(String(proposalId)))
                        .replace("{".concat("depositor", "}"), encodeURIComponent(String(depositor)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('deposits', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits"
                        .replace("{".concat("proposal_id", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/distribution/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: function (evidenceHash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'evidenceHash' is not null or undefined
                    (0, common_1.assertParamExists)('evidence', 'evidenceHash', evidenceHash);
                    localVarPath = "/cosmos/evidence/v1beta1/evidence/{evidence_hash}"
                        .replace("{".concat("evidence_hash", "}"), encodeURIComponent(String(evidenceHash)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: function (paramsType, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'paramsType' is not null or undefined
                    (0, common_1.assertParamExists)('govParams', 'paramsType', paramsType);
                    localVarPath = "/cosmos/gov/v1beta1/params/{params_type}"
                        .replace("{".concat("params_type", "}"), encodeURIComponent(String(paramsType)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/authz/v1beta1/grants";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (granter !== undefined) {
                        localVarQueryParameter['granter'] = granter;
                    }
                    if (grantee !== undefined) {
                        localVarQueryParameter['grantee'] = grantee;
                    }
                    if (msgTypeUrl !== undefined) {
                        localVarQueryParameter['msg_type_url'] = msgTypeUrl;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: function (height, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('historicalInfo', 'height', height);
                    localVarPath = "/cosmos/staking/v1beta1/historical_info/{height}"
                        .replace("{".concat("height", "}"), encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/mint/v1beta1/inflation";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/mint/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: function (moduleName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/upgrade/v1beta1/module_versions";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (moduleName !== undefined) {
                        localVarQueryParameter['module_name'] = moduleName;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: function (subspace, key, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/params/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (subspace !== undefined) {
                        localVarQueryParameter['subspace'] = subspace;
                    }
                    if (key !== undefined) {
                        localVarQueryParameter['key'] = key;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/staking/v1beta1/pool";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('proposal', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}"
                        .replace("{".concat("proposal_id", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/gov/v1beta1/proposals";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (proposalStatus !== undefined) {
                        localVarQueryParameter['proposal_status'] = proposalStatus;
                    }
                    if (voter !== undefined) {
                        localVarQueryParameter['voter'] = voter;
                    }
                    if (depositor !== undefined) {
                        localVarQueryParameter['depositor'] = depositor;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('redelegations', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations"
                        .replace("{".concat("delegator_addr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (srcValidatorAddr !== undefined) {
                        localVarQueryParameter['src_validator_addr'] = srcValidatorAddr;
                    }
                    if (dstValidatorAddr !== undefined) {
                        localVarQueryParameter['dst_validator_addr'] = dstValidatorAddr;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: function (consAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'consAddress' is not null or undefined
                    (0, common_1.assertParamExists)('signingInfo', 'consAddress', consAddress);
                    localVarPath = "/cosmos/slashing/v1beta1/signing_infos/{cons_address}"
                        .replace("{".concat("cons_address", "}"), encodeURIComponent(String(consAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/slashing/v1beta1/signing_infos";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/slashing/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorValidators', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators"
                        .replace("{".concat("delegator_addr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/staking/v1beta1/params";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: function (denom, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'denom' is not null or undefined
                    (0, common_1.assertParamExists)('supplyOf', 'denom', denom);
                    localVarPath = "/cosmos/bank/v1beta1/supply/{denom}"
                        .replace("{".concat("denom", "}"), encodeURIComponent(String(denom)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: function (proposalId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('tallyResult', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/tally"
                        .replace("{".concat("proposal_id", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/bank/v1beta1/supply";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: function (validatorAddr, delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('unbondingDelegation', 'validatorAddr', validatorAddr);
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('unbondingDelegation', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation"
                        .replace("{".concat("validator_addr", "}"), encodeURIComponent(String(validatorAddr)))
                        .replace("{".concat("delegator_addr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: function (lastHeight, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'lastHeight' is not null or undefined
                    (0, common_1.assertParamExists)('upgradedConsensusState', 'lastHeight', lastHeight);
                    localVarPath = "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}"
                        .replace("{".concat("last_height", "}"), encodeURIComponent(String(lastHeight)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('validator', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}"
                        .replace("{".concat("validator_addr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: function (validatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('validatorCommission', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/commission"
                        .replace("{".concat("validator_address", "}"), encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('validatorDelegations', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations"
                        .replace("{".concat("validator_addr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: function (validatorAddress, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('validatorOutstandingRewards', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards"
                        .replace("{".concat("validator_address", "}"), encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddress' is not null or undefined
                    (0, common_1.assertParamExists)('validatorSlashes', 'validatorAddress', validatorAddress);
                    localVarPath = "/cosmos/distribution/v1beta1/validators/{validator_address}/slashes"
                        .replace("{".concat("validator_address", "}"), encodeURIComponent(String(validatorAddress)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (startingHeight !== undefined) {
                        localVarQueryParameter['starting_height'] = startingHeight;
                    }
                    if (endingHeight !== undefined) {
                        localVarQueryParameter['ending_height'] = endingHeight;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('validatorUnbondingDelegations', 'validatorAddr', validatorAddr);
                    localVarPath = "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations"
                        .replace("{".concat("validator_addr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/staking/v1beta1/validators";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the oter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: function (proposalId, voter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('vote', 'proposalId', proposalId);
                    // verify required parameter 'voter' is not null or undefined
                    (0, common_1.assertParamExists)('vote', 'voter', voter);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}"
                        .replace("{".concat("proposal_id", "}"), encodeURIComponent(String(proposalId)))
                        .replace("{".concat("voter", "}"), encodeURIComponent(String(voter)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'proposalId' is not null or undefined
                    (0, common_1.assertParamExists)('votes', 'proposalId', proposalId);
                    localVarPath = "/cosmos/gov/v1beta1/proposals/{proposal_id}/votes"
                        .replace("{".concat("proposal_id", "}"), encodeURIComponent(String(proposalId)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.QueryApiAxiosParamCreator = QueryApiAxiosParamCreator;
/**
 * QueryApi - functional programming interface
 * @export
 */
var QueryApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.QueryApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.account(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Accounts returns all the existing accounts
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: function (granter, grantee, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allowance(granter, grantee, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.annualProvisions(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appliedPlan(name, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: function (address, denom, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.balance(address, denom, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.bankParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.communityPool(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.currentPlan(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: function (validatorAddr, delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegation(validatorAddr, delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: function (delegatorAddress, validatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegationRewards(delegatorAddress, validatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: function (delegatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegationTotalRewards(delegatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: function (delegatorAddr, validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorValidator(delegatorAddr, validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: function (delegatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorValidators(delegatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: function (delegatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.delegatorWithdrawAddress(delegatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: function (denom, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.denomMetadata(denom, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: function (proposalId, depositor, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deposit(proposalId, depositor, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.distributionParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: function (evidenceHash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.evidence(evidenceHash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: function (paramsType, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.govParams(paramsType, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: function (height, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.historicalInfo(height, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.inflation(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mintParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: function (moduleName, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.moduleVersions(moduleName, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: function (subspace, key, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.params(subspace, key, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.pool(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.proposal(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: function (consAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.signingInfo(consAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.slashingParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingParams(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: function (denom, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.supplyOf(denom, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: function (proposalId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.tallyResult(proposalId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: function (validatorAddr, delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.unbondingDelegation(validatorAddr, delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: function (lastHeight, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.upgradedConsensusState(lastHeight, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validator(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: function (validatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorCommission(validatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: function (validatorAddress, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorOutstandingRewards(validatorAddress, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the oter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: function (proposalId, voter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.vote(proposalId, voter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.QueryApiFp = QueryApiFp;
/**
 * QueryApi - factory interface
 * @export
 */
var QueryApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.QueryApiFp)(configuration);
    return {
        /**
         *
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: function (address, options) {
            return localVarFp.account(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Accounts returns all the existing accounts
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: function (granter, grantee, options) {
            return localVarFp.allowance(granter, grantee, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: function (options) {
            return localVarFp.annualProvisions(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: function (name, options) {
            return localVarFp.appliedPlan(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: function (options) {
            return localVarFp.authParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: function (address, denom, options) {
            return localVarFp.balance(address, denom, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: function (options) {
            return localVarFp.bankParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: function (options) {
            return localVarFp.communityPool(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: function (options) {
            return localVarFp.currentPlan(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: function (validatorAddr, delegatorAddr, options) {
            return localVarFp.delegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: function (delegatorAddress, validatorAddress, options) {
            return localVarFp.delegationRewards(delegatorAddress, validatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: function (delegatorAddress, options) {
            return localVarFp.delegationTotalRewards(delegatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: function (delegatorAddr, validatorAddr, options) {
            return localVarFp.delegatorValidator(delegatorAddr, validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: function (delegatorAddress, options) {
            return localVarFp.delegatorValidators(delegatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: function (delegatorAddress, options) {
            return localVarFp.delegatorWithdrawAddress(delegatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: function (denom, options) {
            return localVarFp.denomMetadata(denom, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: function (proposalId, depositor, options) {
            return localVarFp.deposit(proposalId, depositor, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: function (options) {
            return localVarFp.distributionParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: function (evidenceHash, options) {
            return localVarFp.evidence(evidenceHash, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: function (paramsType, options) {
            return localVarFp.govParams(paramsType, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter]
         * @param {string} [grantee]
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: function (height, options) {
            return localVarFp.historicalInfo(height, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: function (options) {
            return localVarFp.inflation(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: function (options) {
            return localVarFp.mintParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: function (moduleName, options) {
            return localVarFp.moduleVersions(moduleName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: function (subspace, key, options) {
            return localVarFp.params(subspace, key, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: function (options) {
            return localVarFp.pool(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: function (proposalId, options) {
            return localVarFp.proposal(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Proposals queries all proposals based on given status.
         * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: function (consAddress, options) {
            return localVarFp.signingInfo(consAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: function (options) {
            return localVarFp.slashingParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: function (options) {
            return localVarFp.stakingParams(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: function (denom, options) {
            return localVarFp.supplyOf(denom, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: function (proposalId, options) {
            return localVarFp.tallyResult(proposalId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: function (validatorAddr, delegatorAddr, options) {
            return localVarFp.unbondingDelegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: function (lastHeight, options) {
            return localVarFp.upgradedConsensusState(lastHeight, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: function (validatorAddr, options) {
            return localVarFp.validator(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: function (validatorAddress, options) {
            return localVarFp.validatorCommission(validatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: function (validatorAddress, options) {
            return localVarFp.validatorOutstandingRewards(validatorAddress, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the oter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: function (proposalId, voter, options) {
            return localVarFp.vote(proposalId, voter, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.QueryApiFactory = QueryApiFactory;
/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
var QueryApi = /** @class */ (function (_super) {
    __extends(QueryApi, _super);
    function QueryApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Account returns account details based on address.
     * @param {string} address address defines the address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.account = function (address, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).account(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Accounts returns all the existing accounts
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.accounts = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary AllBalances queries the balance of all coins for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allBalances = function (address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary AllEvidence queries all evidence.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allEvidence = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Allowance returns fee granted to the grantee by the granter.
     * @param {string} granter granter is the address of the user granting an allowance of their funds.
     * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allowance = function (granter, grantee, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allowance(granter, grantee, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Allowances returns all the grants for address.
     * @param {string} grantee
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.allowances = function (grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary AnnualProvisions current minting annual provisions value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.annualProvisions = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).annualProvisions(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary AppliedPlan queries a previously applied upgrade plan by its name.
     * @param {string} name name is the name of the applied plan to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.appliedPlan = function (name, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).appliedPlan(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries all parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.authParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).authParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Balance queries the balance of a single coin for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.balance = function (address, denom, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).balance(address, denom, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries the parameters of x/bank module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.bankParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).bankParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary CommunityPool queries the community pool coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.communityPool = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).communityPool(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary CurrentPlan queries the current upgrade plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.currentPlan = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).currentPlan(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delegation queries delegate info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegation = function (validatorAddr, delegatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegationRewards queries the total rewards accrued by a delegation.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegationRewards = function (delegatorAddress, validatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegationRewards(delegatorAddress, validatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegationTotalRewards = function (delegatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegationTotalRewards(delegatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorDelegations queries all delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorDelegations = function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorUnbondingDelegations = function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorValidator queries validator info for given delegator validator pair.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorValidator = function (delegatorAddr, validatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorValidator(delegatorAddr, validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorValidators queries the validators of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorValidators = function (delegatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorValidators(delegatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.delegatorWithdrawAddress = function (delegatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).delegatorWithdrawAddress(delegatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DenomsMetadata queries the client metadata of a given coin denomination.
     * @param {string} denom denom is the coin denom to query the metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.denomMetadata = function (denom, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).denomMetadata(denom, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DenomOwners queries for all account addresses that own a particular token denomination.
     * @param {string} denom denom defines the coin denomination to query all account holders for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.denomOwners = function (denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.denomsMetadata = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.deposit = function (proposalId, depositor, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).deposit(proposalId, depositor, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.deposits = function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries params of the distribution module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.distributionParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).distributionParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Evidence queries evidence based on evidence hash.
     * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.evidence = function (evidenceHash, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).evidence(evidenceHash, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.govParams = function (paramsType, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).govParams(paramsType, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Returns list of `Authorization`, granted to the grantee by the granter.
     * @param {string} [granter]
     * @param {string} [grantee]
     * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.grants = function (granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary HistoricalInfo queries the historical info for given height.
     * @param {string} height height defines at which height to query the historical info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.historicalInfo = function (height, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).historicalInfo(height, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Inflation returns the current minting inflation value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.inflation = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).inflation(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params returns the total set of minting parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.mintParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).mintParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ModuleVersions queries the list of module versions from state.
     * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.moduleVersions = function (moduleName, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).moduleVersions(moduleName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries a specific parameter of a module, given its subspace and key.
     * @param {string} [subspace] subspace defines the module to query the parameter for.
     * @param {string} [key] key defines the key of the parameter in the subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.params = function (subspace, key, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).params(subspace, key, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Pool queries the pool info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.pool = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).pool(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.proposal = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).proposal(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Proposals queries all proposals based on given status.
     * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.proposals = function (proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Redelegations queries redelegations of given address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
     * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.redelegations = function (delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary SigningInfo queries the signing info of given cons address
     * @param {string} consAddress cons_address is the address to query signing info of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.signingInfo = function (consAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).signingInfo(consAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary SigningInfos queries signing info of all validators
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.signingInfos = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Params queries the parameters of slashing module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.slashingParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).slashingParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary DelegatorValidators queries all validators info for given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.stakingDelegatorValidators = function (delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Parameters queries the staking parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.stakingParams = function (options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).stakingParams(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary SupplyOf queries the supply of a single coin.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.supplyOf = function (denom, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).supplyOf(denom, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.tallyResult = function (proposalId, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).tallyResult(proposalId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary TotalSupply queries the total supply of all coins.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.totalSupply = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.unbondingDelegation = function (validatorAddr, delegatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).unbondingDelegation(validatorAddr, delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
     * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.upgradedConsensusState = function (lastHeight, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).upgradedConsensusState(lastHeight, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Validator queries validator info for given validator address.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validator = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validator(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorCommission queries accumulated commission for a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorCommission = function (validatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorCommission(validatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorDelegations queries delegate info for given validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorDelegations = function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorOutstandingRewards queries rewards of a validator address.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorOutstandingRewards = function (validatorAddress, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorOutstandingRewards(validatorAddress, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorSlashes queries slash events of a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
     * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorSlashes = function (validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validatorUnbondingDelegations = function (validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Validators queries all validators that match the given status.
     * @param {string} [status] status enables to query for validators matching a given status.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.validators = function (status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the oter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.vote = function (proposalId, voter, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).vote(proposalId, voter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    QueryApi.prototype.votes = function (proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.QueryApiFp)(this.configuration).votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QueryApi;
}(base_1.BaseAPI));
exports.QueryApi = QueryApi;
/**
 * ServiceApi - axios parameter creator
 * @export
 */
var ServiceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {InlineObject16} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('broadcastTx', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/txs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: function (height, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('getBlockByHeight', 'height', height);
                    localVarPath = "/cosmos/base/tendermint/v1beta1/blocks/{height}"
                        .replace("{".concat("height", "}"), encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/blocks/latest";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/validatorsets/latest";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/node_info";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/base/tendermint/v1beta1/syncing";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: function (hash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'hash' is not null or undefined
                    (0, common_1.assertParamExists)('getTx', 'hash', hash);
                    localVarPath = "/cosmos/tx/v1beta1/txs/{hash}"
                        .replace("{".concat("hash", "}"), encodeURIComponent(String(hash)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/cosmos/tx/v1beta1/txs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (events) {
                        localVarQueryParameter['events'] = events;
                    }
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    if (orderBy !== undefined) {
                        localVarQueryParameter['order_by'] = orderBy;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('getValidatorSetByHeight', 'height', height);
                    localVarPath = "/cosmos/base/tendermint/v1beta1/validatorsets/{height}"
                        .replace("{".concat("height", "}"), encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (paginationKey !== undefined) {
                        localVarQueryParameter['pagination.key'] = paginationKey;
                    }
                    if (paginationOffset !== undefined) {
                        localVarQueryParameter['pagination.offset'] = paginationOffset;
                    }
                    if (paginationLimit !== undefined) {
                        localVarQueryParameter['pagination.limit'] = paginationLimit;
                    }
                    if (paginationCountTotal !== undefined) {
                        localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
                    }
                    if (paginationReverse !== undefined) {
                        localVarQueryParameter['pagination.reverse'] = paginationReverse;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    (0, common_1.assertParamExists)('simulate', 'body', body);
                    localVarPath = "/cosmos/tx/v1beta1/simulate";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.ServiceApiAxiosParamCreator = ServiceApiAxiosParamCreator;
/**
 * ServiceApi - functional programming interface
 * @export
 */
var ServiceApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ServiceApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {InlineObject16} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.broadcastTx(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: function (height, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getBlockByHeight(height, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestBlock(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNodeInfo(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getSyncing(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: function (hash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTx(hash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.simulate(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.ServiceApiFp = ServiceApiFp;
/**
 * ServiceApi - factory interface
 * @export
 */
var ServiceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ServiceApiFp)(configuration);
    return {
        /**
         *
         * @summary BroadcastTx broadcast transaction.
         * @param {InlineObject16} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: function (body, options) {
            return localVarFp.broadcastTx(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: function (height, options) {
            return localVarFp.getBlockByHeight(height, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: function (options) {
            return localVarFp.getLatestBlock(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: function (options) {
            return localVarFp.getNodeInfo(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: function (options) {
            return localVarFp.getSyncing(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: function (hash, options) {
            return localVarFp.getTx(hash, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options) {
            return localVarFp.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
            return localVarFp.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: function (body, options) {
            return localVarFp.simulate(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ServiceApiFactory = ServiceApiFactory;
/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
var ServiceApi = /** @class */ (function (_super) {
    __extends(ServiceApi, _super);
    function ServiceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary BroadcastTx broadcast transaction.
     * @param {InlineObject16} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.broadcastTx = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).broadcastTx(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetBlockByHeight queries block for given height.
     * @param {string} height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getBlockByHeight = function (height, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getBlockByHeight(height, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetLatestBlock returns the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getLatestBlock = function (options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getLatestBlock(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetLatestValidatorSet queries latest validator-set.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getLatestValidatorSet = function (paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetNodeInfo queries the current node info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getNodeInfo = function (options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getNodeInfo(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetSyncing queries node syncing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getSyncing = function (options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getSyncing(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetTx fetches a tx by hash.
     * @param {string} hash hash is the tx hash to query, encoded as a hex string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getTx = function (hash, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getTx(hash, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetTxsEvent fetches txs by event.
     * @param {Array<string>} [events] events is the list of transaction event type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getTxsEvent = function (events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary GetValidatorSetByHeight queries validator-set at a given height.
     * @param {string} height
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.getValidatorSetByHeight = function (height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Simulate simulates executing a transaction for estimating gas usage.
     * @param {CosmosTxV1beta1SimulateRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    ServiceApi.prototype.simulate = function (body, options) {
        var _this = this;
        return (0, exports.ServiceApiFp)(this.configuration).simulate(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ServiceApi;
}(base_1.BaseAPI));
exports.ServiceApi = ServiceApi;
/**
 * SlashingApi - axios parameter creator
 * @export
 */
var SlashingApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/slashing/parameters";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingSigningInfosGet: function (page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'page' is not null or undefined
                    (0, common_1.assertParamExists)('slashingSigningInfosGet', 'page', page);
                    // verify required parameter 'limit' is not null or undefined
                    (0, common_1.assertParamExists)('slashingSigningInfosGet', 'limit', limit);
                    localVarPath = "/slashing/signing_infos";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {InlineObject7} unjailBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('slashingValidatorsValidatorAddrUnjailPost', 'validatorAddr', validatorAddr);
                    // verify required parameter 'unjailBody' is not null or undefined
                    (0, common_1.assertParamExists)('slashingValidatorsValidatorAddrUnjailPost', 'unjailBody', unjailBody);
                    localVarPath = "/slashing/validators/{validatorAddr}/unjail"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(unjailBody, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.SlashingApiAxiosParamCreator = SlashingApiAxiosParamCreator;
/**
 * SlashingApi - functional programming interface
 * @export
 */
var SlashingApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SlashingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingParametersGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.slashingParametersGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingSigningInfosGet: function (page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.slashingSigningInfosGet(page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {InlineObject7} unjailBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.SlashingApiFp = SlashingApiFp;
/**
 * SlashingApi - factory interface
 * @export
 */
var SlashingApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SlashingApiFp)(configuration);
    return {
        /**
         *
         * @summary Get the current slashing parameters
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingParametersGet: function (options) {
            return localVarFp.slashingParametersGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get sign info of all validators
         * @summary Get sign info of given all validators
         * @param {number} page Page number
         * @param {number} limit Maximum number of items per page
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingSigningInfosGet: function (page, limit, options) {
            return localVarFp.slashingSigningInfosGet(page, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Send transaction to unjail a jailed validator
         * @summary Unjail a jailed validator
         * @param {string} validatorAddr Bech32 validator address
         * @param {InlineObject7} unjailBody
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        slashingValidatorsValidatorAddrUnjailPost: function (validatorAddr, unjailBody, options) {
            return localVarFp.slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SlashingApiFactory = SlashingApiFactory;
/**
 * SlashingApi - object-oriented interface
 * @export
 * @class SlashingApi
 * @extends {BaseAPI}
 */
var SlashingApi = /** @class */ (function (_super) {
    __extends(SlashingApi, _super);
    function SlashingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get the current slashing parameters
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    SlashingApi.prototype.slashingParametersGet = function (options) {
        var _this = this;
        return (0, exports.SlashingApiFp)(this.configuration).slashingParametersGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get sign info of all validators
     * @summary Get sign info of given all validators
     * @param {number} page Page number
     * @param {number} limit Maximum number of items per page
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    SlashingApi.prototype.slashingSigningInfosGet = function (page, limit, options) {
        var _this = this;
        return (0, exports.SlashingApiFp)(this.configuration).slashingSigningInfosGet(page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Send transaction to unjail a jailed validator
     * @summary Unjail a jailed validator
     * @param {string} validatorAddr Bech32 validator address
     * @param {InlineObject7} unjailBody
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SlashingApi
     */
    SlashingApi.prototype.slashingValidatorsValidatorAddrUnjailPost = function (validatorAddr, unjailBody, options) {
        var _this = this;
        return (0, exports.SlashingApiFp)(this.configuration).slashingValidatorsValidatorAddrUnjailPost(validatorAddr, unjailBody, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SlashingApi;
}(base_1.BaseAPI));
exports.SlashingApi = SlashingApi;
/**
 * StakingApi - axios parameter creator
 * @export
 */
var StakingApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrDelegationsGet', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/delegations"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject4} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrDelegationsPost', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/delegations"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(delegation, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet', 'delegatorAddr', delegatorAddr);
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/delegations/{validatorAddr}"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)))
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject6} [delegation]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrRedelegationsPost', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/redelegations"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(delegation, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrUnbondingDelegationsGet', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/unbonding_delegations"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject5} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrUnbondingDelegationsPost', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/unbonding_delegations"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(delegation, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet', 'delegatorAddr', delegatorAddr);
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)))
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrValidatorsGet', 'delegatorAddr', delegatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/validators"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'delegatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet', 'delegatorAddr', delegatorAddr);
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/staking/delegators/{delegatorAddr}/validators/{validatorAddr}"
                        .replace("{".concat("delegatorAddr", "}"), encodeURIComponent(String(delegatorAddr)))
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingParametersGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/staking/parameters";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingPoolGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/staking/pool";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/staking/redelegations";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (delegator !== undefined) {
                        localVarQueryParameter['delegator'] = delegator;
                    }
                    if (validatorFrom !== undefined) {
                        localVarQueryParameter['validator_from'] = validatorFrom;
                    }
                    if (validatorTo !== undefined) {
                        localVarQueryParameter['validator_to'] = validatorTo;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsGet: function (status, page, limit, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/staking/validators";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (status !== undefined) {
                        localVarQueryParameter['status'] = status;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingValidatorsValidatorAddrDelegationsGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/staking/validators/{validatorAddr}/delegations"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingValidatorsValidatorAddrGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/staking/validators/{validatorAddr}"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'validatorAddr' is not null or undefined
                    (0, common_1.assertParamExists)('stakingValidatorsValidatorAddrUnbondingDelegationsGet', 'validatorAddr', validatorAddr);
                    localVarPath = "/staking/validators/{validatorAddr}/unbonding_delegations"
                        .replace("{".concat("validatorAddr", "}"), encodeURIComponent(String(validatorAddr)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.StakingApiAxiosParamCreator = StakingApiAxiosParamCreator;
/**
 * StakingApi - functional programming interface
 * @export
 */
var StakingApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.StakingApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject4} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject6} [delegation]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject5} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingParametersGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingParametersGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingPoolGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingPoolGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsGet: function (status, page, limit, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingValidatorsGet(status, page, limit, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingValidatorsValidatorAddrGet(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.StakingApiFp = StakingApiFp;
/**
 * StakingApi - factory interface
 * @export
 */
var StakingApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.StakingApiFp)(configuration);
    return {
        /**
         *
         * @summary Get all delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsGet: function (delegatorAddr, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Submit delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject4} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsPost: function (delegatorAddr, delegation, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query the current delegation between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Submit a redelegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject6} [delegation]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrRedelegationsPost: function (delegatorAddr, delegation, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all unbonding delegations from a delegator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsGet: function (delegatorAddr, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Submit an unbonding delegation
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {InlineObject5} [delegation]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsPost: function (delegatorAddr, delegation, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query all unbonding delegations between a delegator and a validator
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query all validators that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsGet: function (delegatorAddr, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query a validator that a delegator is bonded to
         * @param {string} delegatorAddr Bech32 AccAddress of Delegator
         * @param {string} validatorAddr Bech32 ValAddress of Delegator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet: function (delegatorAddr, validatorAddr, options) {
            return localVarFp.stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get the current staking parameter values
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingParametersGet: function (options) {
            return localVarFp.stakingParametersGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get the current state of the staking pool
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingPoolGet: function (options) {
            return localVarFp.stakingPoolGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all redelegations (filter by query params)
         * @param {string} [delegator] Bech32 AccAddress of Delegator
         * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
         * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingRedelegationsGet: function (delegator, validatorFrom, validatorTo, options) {
            return localVarFp.stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all validator candidates. By default it returns only the bonded validators.
         * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
         * @param {number} [page] The page number.
         * @param {number} [limit] The maximum number of items per page.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsGet: function (status, page, limit, options) {
            return localVarFp.stakingValidatorsGet(status, page, limit, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrDelegationsGet: function (validatorAddr, options) {
            return localVarFp.stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query the information from a single validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrGet: function (validatorAddr, options) {
            return localVarFp.stakingValidatorsValidatorAddrGet(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all unbonding delegations from a validator
         * @param {string} validatorAddr Bech32 OperatorAddress of validator
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        stakingValidatorsValidatorAddrUnbondingDelegationsGet: function (validatorAddr, options) {
            return localVarFp.stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.StakingApiFactory = StakingApiFactory;
/**
 * StakingApi - object-oriented interface
 * @export
 * @class StakingApi
 * @extends {BaseAPI}
 */
var StakingApi = /** @class */ (function (_super) {
    __extends(StakingApi, _super);
    function StakingApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get all delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsGet = function (delegatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrDelegationsGet(delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Submit delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {InlineObject4} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsPost = function (delegatorAddr, delegation, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrDelegationsPost(delegatorAddr, delegation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query the current delegation between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Submit a redelegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {InlineObject6} [delegation]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrRedelegationsPost = function (delegatorAddr, delegation, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrRedelegationsPost(delegatorAddr, delegation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all unbonding delegations from a delegator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsGet = function (delegatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsGet(delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Submit an unbonding delegation
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {InlineObject5} [delegation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsPost = function (delegatorAddr, delegation, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsPost(delegatorAddr, delegation, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query all unbonding delegations between a delegator and a validator
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrUnbondingDelegationsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query all validators that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsGet = function (delegatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrValidatorsGet(delegatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query a validator that a delegator is bonded to
     * @param {string} delegatorAddr Bech32 AccAddress of Delegator
     * @param {string} validatorAddr Bech32 ValAddress of Delegator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet = function (delegatorAddr, validatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingDelegatorsDelegatorAddrValidatorsValidatorAddrGet(delegatorAddr, validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get the current staking parameter values
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingParametersGet = function (options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingParametersGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get the current state of the staking pool
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingPoolGet = function (options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingPoolGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all redelegations (filter by query params)
     * @param {string} [delegator] Bech32 AccAddress of Delegator
     * @param {string} [validatorFrom] Bech32 ValAddress of SrcValidator
     * @param {string} [validatorTo] Bech32 ValAddress of DstValidator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingRedelegationsGet = function (delegator, validatorFrom, validatorTo, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingRedelegationsGet(delegator, validatorFrom, validatorTo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all validator candidates. By default it returns only the bonded validators.
     * @param {string} [status] The validator bond status. Must be either \&#39;bonded\&#39;, \&#39;unbonded\&#39;, or \&#39;unbonding\&#39;.
     * @param {number} [page] The page number.
     * @param {number} [limit] The maximum number of items per page.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsGet = function (status, page, limit, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingValidatorsGet(status, page, limit, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsValidatorAddrDelegationsGet = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingValidatorsValidatorAddrDelegationsGet(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query the information from a single validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsValidatorAddrGet = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingValidatorsValidatorAddrGet(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all unbonding delegations from a validator
     * @param {string} validatorAddr Bech32 OperatorAddress of validator
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    StakingApi.prototype.stakingValidatorsValidatorAddrUnbondingDelegationsGet = function (validatorAddr, options) {
        var _this = this;
        return (0, exports.StakingApiFp)(this.configuration).stakingValidatorsValidatorAddrUnbondingDelegationsGet(validatorAddr, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StakingApi;
}(base_1.BaseAPI));
exports.StakingApi = StakingApi;
/**
 * TendermintRPCApi - axios parameter creator
 * @export
 */
var TendermintRPCApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet: function (height, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('blocksHeightGet', 'height', height);
                    localVarPath = "/blocks/{height}"
                        .replace("{".concat("height", "}"), encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/blocks/latest";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/syncing";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet: function (height, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'height' is not null or undefined
                    (0, common_1.assertParamExists)('validatorsetsHeightGet', 'height', height);
                    localVarPath = "/validatorsets/{height}"
                        .replace("{".concat("height", "}"), encodeURIComponent(String(height)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/validatorsets/latest";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TendermintRPCApiAxiosParamCreator = TendermintRPCApiAxiosParamCreator;
/**
 * TendermintRPCApi - functional programming interface
 * @export
 */
var TendermintRPCApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TendermintRPCApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet: function (height, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.blocksHeightGet(height, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.blocksLatestGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.syncingGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet: function (height, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorsetsHeightGet(height, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.validatorsetsLatestGet(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TendermintRPCApiFp = TendermintRPCApiFp;
/**
 * TendermintRPCApi - factory interface
 * @export
 */
var TendermintRPCApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TendermintRPCApiFp)(configuration);
    return {
        /**
         *
         * @summary Get a block at a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksHeightGet: function (height, options) {
            return localVarFp.blocksHeightGet(height, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get the latest block
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blocksLatestGet: function (options) {
            return localVarFp.blocksLatestGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get if the node is currently syning with other nodes
         * @summary Syncing state of node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        syncingGet: function (options) {
            return localVarFp.syncingGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get a validator set a certain height
         * @param {number} height Block height
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsHeightGet: function (height, options) {
            return localVarFp.validatorsetsHeightGet(height, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get the latest validator set
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorsetsLatestGet: function (options) {
            return localVarFp.validatorsetsLatestGet(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TendermintRPCApiFactory = TendermintRPCApiFactory;
/**
 * TendermintRPCApi - object-oriented interface
 * @export
 * @class TendermintRPCApi
 * @extends {BaseAPI}
 */
var TendermintRPCApi = /** @class */ (function (_super) {
    __extends(TendermintRPCApi, _super);
    function TendermintRPCApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get a block at a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.blocksHeightGet = function (height, options) {
        var _this = this;
        return (0, exports.TendermintRPCApiFp)(this.configuration).blocksHeightGet(height, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get the latest block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.blocksLatestGet = function (options) {
        var _this = this;
        return (0, exports.TendermintRPCApiFp)(this.configuration).blocksLatestGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get if the node is currently syning with other nodes
     * @summary Syncing state of node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.syncingGet = function (options) {
        var _this = this;
        return (0, exports.TendermintRPCApiFp)(this.configuration).syncingGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get a validator set a certain height
     * @param {number} height Block height
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.validatorsetsHeightGet = function (height, options) {
        var _this = this;
        return (0, exports.TendermintRPCApiFp)(this.configuration).validatorsetsHeightGet(height, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get the latest validator set
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TendermintRPCApi
     */
    TendermintRPCApi.prototype.validatorsetsLatestGet = function (options) {
        var _this = this;
        return (0, exports.TendermintRPCApiFp)(this.configuration).validatorsetsLatestGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TendermintRPCApi;
}(base_1.BaseAPI));
exports.TendermintRPCApi = TendermintRPCApi;
/**
 * TransactionsApi - axios parameter creator
 * @export
 */
var TransactionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {InlineObject2} tx
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsDecodePost: function (tx, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'tx' is not null or undefined
                    (0, common_1.assertParamExists)('txsDecodePost', 'tx', tx);
                    localVarPath = "/txs/decode";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tx, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {InlineObject1} tx
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsEncodePost: function (tx, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'tx' is not null or undefined
                    (0, common_1.assertParamExists)('txsEncodePost', 'tx', tx);
                    localVarPath = "/txs/encode";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(tx, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/txs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (messageAction !== undefined) {
                        localVarQueryParameter['message.action'] = messageAction;
                    }
                    if (messageSender !== undefined) {
                        localVarQueryParameter['message.sender'] = messageSender;
                    }
                    if (page !== undefined) {
                        localVarQueryParameter['page'] = page;
                    }
                    if (limit !== undefined) {
                        localVarQueryParameter['limit'] = limit;
                    }
                    if (txMinheight !== undefined) {
                        localVarQueryParameter['tx.minheight'] = txMinheight;
                    }
                    if (txMaxheight !== undefined) {
                        localVarQueryParameter['tx.maxheight'] = txMaxheight;
                    }
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsHashGet: function (hash, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'hash' is not null or undefined
                    (0, common_1.assertParamExists)('txsHashGet', 'hash', hash);
                    localVarPath = "/txs/{hash}"
                        .replace("{".concat("hash", "}"), encodeURIComponent(String(hash)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {InlineObject} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost: function (txBroadcast, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'txBroadcast' is not null or undefined
                    (0, common_1.assertParamExists)('txsPost', 'txBroadcast', txBroadcast);
                    localVarPath = "/txs";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(txBroadcast, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.TransactionsApiAxiosParamCreator = TransactionsApiAxiosParamCreator;
/**
 * TransactionsApi - functional programming interface
 * @export
 */
var TransactionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TransactionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {InlineObject2} tx
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsDecodePost: function (tx, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txsDecodePost(tx, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {InlineObject1} tx
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsEncodePost: function (tx, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txsEncodePost(tx, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsHashGet: function (hash, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txsHashGet(hash, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {InlineObject} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost: function (txBroadcast, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.txsPost(txBroadcast, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TransactionsApiFp = TransactionsApiFp;
/**
 * TransactionsApi - factory interface
 * @export
 */
var TransactionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TransactionsApiFp)(configuration);
    return {
        /**
         * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
         * @summary Decode a transaction from the Amino wire format
         * @param {InlineObject2} tx
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsDecodePost: function (tx, options) {
            return localVarFp.txsDecodePost(tx, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
         * @summary Encode a transaction to the Amino wire format
         * @param {InlineObject1} tx
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsEncodePost: function (tx, options) {
            return localVarFp.txsEncodePost(tx, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Search transactions by events.
         * @summary Search transactions
         * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
         * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
         * @param {number} [page] Page number
         * @param {number} [limit] Maximum number of items per page
         * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
         * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsGet: function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
            return localVarFp.txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Retrieve a transaction using its hash.
         * @summary Get a Tx by hash
         * @param {string} hash Tx hash
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        txsHashGet: function (hash, options) {
            return localVarFp.txsHashGet(hash, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Broadcast a signed tx to a full node
         * @summary Broadcast a signed tx
         * @param {InlineObject} txBroadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        txsPost: function (txBroadcast, options) {
            return localVarFp.txsPost(txBroadcast, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TransactionsApiFactory = TransactionsApiFactory;
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
var TransactionsApi = /** @class */ (function (_super) {
    __extends(TransactionsApi, _super);
    function TransactionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Decode a transaction (signed or not) from base64-encoded Amino serialized bytes to JSON
     * @summary Decode a transaction from the Amino wire format
     * @param {InlineObject2} tx
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsDecodePost = function (tx, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).txsDecodePost(tx, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
     * @summary Encode a transaction to the Amino wire format
     * @param {InlineObject1} tx
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsEncodePost = function (tx, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).txsEncodePost(tx, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Search transactions by events.
     * @summary Search transactions
     * @param {string} [messageAction] transaction events such as \&#39;message.action&#x3D;send\&#39; which results in the following endpoint: \&#39;GET /txs?message.action&#x3D;send\&#39;. note that each module documents its own events. look for xx_events.md in the corresponding cosmos-sdk/docs/spec directory
     * @param {string} [messageSender] transaction tags with sender: \&#39;GET /txs?message.action&#x3D;send&amp;message.sender&#x3D;cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv\&#39;
     * @param {number} [page] Page number
     * @param {number} [limit] Maximum number of items per page
     * @param {number} [txMinheight] transactions on blocks with height greater or equal this value
     * @param {number} [txMaxheight] transactions on blocks with height less than or equal this value
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsGet = function (messageAction, messageSender, page, limit, txMinheight, txMaxheight, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).txsGet(messageAction, messageSender, page, limit, txMinheight, txMaxheight, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Retrieve a transaction using its hash.
     * @summary Get a Tx by hash
     * @param {string} hash Tx hash
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsHashGet = function (hash, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).txsHashGet(hash, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Broadcast a signed tx to a full node
     * @summary Broadcast a signed tx
     * @param {InlineObject} txBroadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    TransactionsApi.prototype.txsPost = function (txBroadcast, options) {
        var _this = this;
        return (0, exports.TransactionsApiFp)(this.configuration).txsPost(txBroadcast, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TransactionsApi;
}(base_1.BaseAPI));
exports.TransactionsApi = TransactionsApi;
